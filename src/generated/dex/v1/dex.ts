/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.2
 * source: dex/v1/dex.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace dex.v1 {
    export class GetDexRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3]];
        constructor(data?: any[] | ({
            underlying_asset?: string;
        } & (({
            start_strike_price?: number;
        }) | ({
            end_strike_price?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("underlying_asset" in data && data.underlying_asset != undefined) {
                    this.underlying_asset = data.underlying_asset;
                }
                if ("start_strike_price" in data && data.start_strike_price != undefined) {
                    this.start_strike_price = data.start_strike_price;
                }
                if ("end_strike_price" in data && data.end_strike_price != undefined) {
                    this.end_strike_price = data.end_strike_price;
                }
            }
        }
        get underlying_asset() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set underlying_asset(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get start_strike_price() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set start_strike_price(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_start_strike_price() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get end_strike_price() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set end_strike_price(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_end_strike_price() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _start_strike_price() {
            const cases: {
                [index: number]: "none" | "start_strike_price";
            } = {
                0: "none",
                2: "start_strike_price"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _end_strike_price() {
            const cases: {
                [index: number]: "none" | "end_strike_price";
            } = {
                0: "none",
                3: "end_strike_price"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            underlying_asset?: string;
            start_strike_price?: number;
            end_strike_price?: number;
        }): GetDexRequest {
            const message = new GetDexRequest({});
            if (data.underlying_asset != null) {
                message.underlying_asset = data.underlying_asset;
            }
            if (data.start_strike_price != null) {
                message.start_strike_price = data.start_strike_price;
            }
            if (data.end_strike_price != null) {
                message.end_strike_price = data.end_strike_price;
            }
            return message;
        }
        toObject() {
            const data: {
                underlying_asset?: string;
                start_strike_price?: number;
                end_strike_price?: number;
            } = {};
            if (this.underlying_asset != null) {
                data.underlying_asset = this.underlying_asset;
            }
            if (this.start_strike_price != null) {
                data.start_strike_price = this.start_strike_price;
            }
            if (this.end_strike_price != null) {
                data.end_strike_price = this.end_strike_price;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.underlying_asset.length)
                writer.writeString(1, this.underlying_asset);
            if (this.has_start_strike_price)
                writer.writeDouble(2, this.start_strike_price);
            if (this.has_end_strike_price)
                writer.writeDouble(3, this.end_strike_price);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDexRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDexRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.underlying_asset = reader.readString();
                        break;
                    case 2:
                        message.start_strike_price = reader.readDouble();
                        break;
                    case 3:
                        message.end_strike_price = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDexRequest {
            return GetDexRequest.deserialize(bytes);
        }
    }
    export class GetDexResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            spot_price?: number;
            strike_prices?: Map<string, ExpirationDateMap>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("spot_price" in data && data.spot_price != undefined) {
                    this.spot_price = data.spot_price;
                }
                if ("strike_prices" in data && data.strike_prices != undefined) {
                    this.strike_prices = data.strike_prices;
                }
            }
            if (!this.strike_prices)
                this.strike_prices = new Map();
        }
        get spot_price() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set spot_price(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get strike_prices() {
            return pb_1.Message.getField(this, 2) as any as Map<string, ExpirationDateMap>;
        }
        set strike_prices(value: Map<string, ExpirationDateMap>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            spot_price?: number;
            strike_prices?: {
                [key: string]: ReturnType<typeof ExpirationDateMap.prototype.toObject>;
            };
        }): GetDexResponse {
            const message = new GetDexResponse({});
            if (data.spot_price != null) {
                message.spot_price = data.spot_price;
            }
            if (typeof data.strike_prices == "object") {
                message.strike_prices = new Map(Object.entries(data.strike_prices).map(([key, value]) => [key, ExpirationDateMap.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                spot_price?: number;
                strike_prices?: {
                    [key: string]: ReturnType<typeof ExpirationDateMap.prototype.toObject>;
                };
            } = {};
            if (this.spot_price != null) {
                data.spot_price = this.spot_price;
            }
            if (this.strike_prices != null) {
                data.strike_prices = (Object.fromEntries)((Array.from)(this.strike_prices).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.spot_price != 0)
                writer.writeDouble(1, this.spot_price);
            for (const [key, value] of this.strike_prices) {
                writer.writeMessage(2, this.strike_prices, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDexResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDexResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.spot_price = reader.readDouble();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.strike_prices as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = ExpirationDateMap.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetDexResponse {
            return GetDexResponse.deserialize(bytes);
        }
    }
    export class ExpirationDateMap extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            expiration_dates?: Map<string, OptionTypeMap>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("expiration_dates" in data && data.expiration_dates != undefined) {
                    this.expiration_dates = data.expiration_dates;
                }
            }
            if (!this.expiration_dates)
                this.expiration_dates = new Map();
        }
        get expiration_dates() {
            return pb_1.Message.getField(this, 1) as any as Map<string, OptionTypeMap>;
        }
        set expiration_dates(value: Map<string, OptionTypeMap>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            expiration_dates?: {
                [key: string]: ReturnType<typeof OptionTypeMap.prototype.toObject>;
            };
        }): ExpirationDateMap {
            const message = new ExpirationDateMap({});
            if (typeof data.expiration_dates == "object") {
                message.expiration_dates = new Map(Object.entries(data.expiration_dates).map(([key, value]) => [key, OptionTypeMap.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                expiration_dates?: {
                    [key: string]: ReturnType<typeof OptionTypeMap.prototype.toObject>;
                };
            } = {};
            if (this.expiration_dates != null) {
                data.expiration_dates = (Object.fromEntries)((Array.from)(this.expiration_dates).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.expiration_dates) {
                writer.writeMessage(1, this.expiration_dates, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExpirationDateMap {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExpirationDateMap();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.expiration_dates as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = OptionTypeMap.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExpirationDateMap {
            return ExpirationDateMap.deserialize(bytes);
        }
    }
    export class OptionTypeMap extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            option_types?: Map<string, DexValue>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("option_types" in data && data.option_types != undefined) {
                    this.option_types = data.option_types;
                }
            }
            if (!this.option_types)
                this.option_types = new Map();
        }
        get option_types() {
            return pb_1.Message.getField(this, 1) as any as Map<string, DexValue>;
        }
        set option_types(value: Map<string, DexValue>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            option_types?: {
                [key: string]: ReturnType<typeof DexValue.prototype.toObject>;
            };
        }): OptionTypeMap {
            const message = new OptionTypeMap({});
            if (typeof data.option_types == "object") {
                message.option_types = new Map(Object.entries(data.option_types).map(([key, value]) => [key, DexValue.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                option_types?: {
                    [key: string]: ReturnType<typeof DexValue.prototype.toObject>;
                };
            } = {};
            if (this.option_types != null) {
                data.option_types = (Object.fromEntries)((Array.from)(this.option_types).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.option_types) {
                writer.writeMessage(1, this.option_types, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OptionTypeMap {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OptionTypeMap();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.option_types as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = DexValue.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OptionTypeMap {
            return OptionTypeMap.deserialize(bytes);
        }
    }
    export class DexValue extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: number;
        }): DexValue {
            const message = new DexValue({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: number;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value != 0)
                writer.writeDouble(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DexValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DexValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DexValue {
            return DexValue.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedDexServiceService {
        static definition = {
            GetDex: {
                path: "/dex.v1.DexService/GetDex",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetDexRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetDexRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetDexResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetDexResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetDex(call: grpc_1.ServerUnaryCall<GetDexRequest, GetDexResponse>, callback: grpc_1.sendUnaryData<GetDexResponse>): void;
    }
    export class DexServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedDexServiceService.definition, "DexService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetDex: GrpcUnaryServiceInterface<GetDexRequest, GetDexResponse> = (message: GetDexRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetDexResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetDexResponse>, callback?: grpc_1.requestCallback<GetDexResponse>): grpc_1.ClientUnaryCall => {
            return super.GetDex(message, metadata, options, callback);
        };
    }
}
